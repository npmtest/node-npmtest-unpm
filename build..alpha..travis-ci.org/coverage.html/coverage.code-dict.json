{"/home/travis/build/npmtest/node-npmtest-unpm/test.js":"/* istanbul instrument in package npmtest_unpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unpm/lib.npmtest_unpm.js":"/* istanbul instrument in package npmtest_unpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_unpm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_unpm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-unpm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-unpm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_unpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_unpm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_unpm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_unpm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_unpm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_unpm.__dirname + '/lib.npmtest_unpm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/index.js":"var Router = require('unpm-router')\nvar auth = require('unpm-auth')\nvar http = require('http')\n\nvar controllers = require('./lib/controllers')\nvar Package = require('./lib/models/Package')\nvar add_defaults = require('./lib/config')\nvar logging = require('./lib/logging')\nvar handler = require('./lib/handler')\nvar cidr = require('./lib/cidr')\n\nmodule.exports = unpm\n\nfunction unpm(config, User, backend) {\n  if(!(this instanceof unpm)) {\n    return new unpm(config, User, backend)\n  }\n\n  config = add_defaults(config)\n  this.router = Router(config.basePathname)\n  this.handler = handler(this)\n  this.server = http.createServer(this.handler)\n  this.log = logging(config)\n  this.port = config.port || 8123\n  this.config = config\n  this.middleware = []\n  this.backend = Object.create(config.backend || {})\n\n  if(backend) {\n    config.backend = backend\n  }\n\n  if(User) {\n    config.User = User\n  }\n\n  this.Package = Package(this)\n  auth(this, config.User)\n  cidr(this)\n\n  this.router.add('PUT', '/:name', controllers.publish)\n  this.router.add('GET', '/:name/-/:name/:version.tgz', controllers.getTarball)\n  this.router.add('GET', '/:name/:version?', controllers.getPackage)\n  this.router.add('PUT', '/:name/-rev/:rev?', controllers.unpublish.some)\n  this.router.add('DELETE', '/:name/-rev/:rev?', controllers.unpublish.all)\n  this.router.add('DELETE', '/:name/-/:file/-rev/:rev', controllers.unpublish.tarball)\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-router/index.js":"var Routes = require('routes')\nvar url = require('url')\nvar qs = require('querystring')\n\nmodule.exports = Router\n\nfunction Router(root) {\n  if(!(this instanceof Router)) {\n    return new Router(root)\n  }\n\n  this.routers = {}\n  this.root = root || ''\n}\n\nRouter.prototype.add = function add(method, pattern, handler) {\n  method = method.toUpperCase()\n\n  if(!this.routers[method]) {\n    this.routers[method] = Routes()\n  }\n\n  this.routers[method].addRoute(pattern, handler)\n}\n\nRouter.prototype.match = function match(method, route) {\n  if(typeof method === 'object') {\n    route = method.url\n    method = method.method.toUpperCase()\n  } else {\n    method = method.toUpperCase()\n  }\n\n  route = url.parse(route, true)\n\n  var routes = this.routers[method]\n    , query = route.query\n    , result\n\n  if(!routes) {\n    return\n  }\n\n  if(this.root && route.pathname.indexOf(this.root) !== 0) {\n    return\n  }\n\n  route = route.pathname.slice(this.root.length)\n\n  if(route[0] !== '/') {\n    route = '/' + route\n  }\n\n  result = routes.match(route)\n\n  if(!result) {\n    return\n  }\n\n  result.splats = result.splats.map(qs.unescape)\n\n  var params = Object.keys(result.params)\n\n  for (var i = 0, l = params.length; i < l; ++i) {\n    if(result.params[params[i]]) {\n      result.params[params[i]] = qs.unescape(result.params[params[i]])\n    }\n  }\n\n  result.query = query || {}\n  result.method = method\n  result.path = route\n\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/index.js":"var controllers = require('./lib/controllers')\nvar checkAuth = require('./lib/check-auth')\nvar concat = require('concat-stream')\nvar User = require('./lib/user')\n\nmodule.exports = setup\nmodule.exports.checkAuth = checkAuth\n\nfunction setup(unpm, userModel) {\n  unpm.router.add(\n      'GET'\n    , '/-/user/org.couchdb.user:*'\n    , controllers.user\n  )\n  unpm.router.add(\n      'PUT'\n    , '/-/user/org.couchdb.user:*/*/*'\n    , load(controllers.update)\n  )\n  unpm.router.add(\n      'PUT'\n    , '/-/user/org.couchdb.user:*'\n    , load(controllers.register)\n  )\n\n  unpm.User = userModel || User(unpm)\n\n  if(unpm.config.checkAuth) {\n    unpm.middleware.push(checkAuth)\n  }\n\n  function load(handler) {\n    return function(respond, route, unpm) {\n      var stream = concat(loaded)\n\n      stream.on('error', respond)\n      respond.req.pipe(stream)\n\n      function loaded(data) {\n        try {\n          handler(respond, route, JSON.parse(data.toString()), unpm)\n        } catch(err) {\n          respond(err)\n        }\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/controllers/index.js":"module.exports.update = require('./update')\nmodule.exports.register = require('./register')\nmodule.exports.user = require('./user')\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/controllers/update.js":"module.exports = update\n\nfunction update(respond, route, body, unpm) {\n  var username = route.splats[0]\n\n  var pass = new Buffer(\n    respond.req.headers.authorization.split(' ')[1],\n    'base64'\n  ).toString().split(':')[1]\n\n  unpm.User.auth(username, pass, got_user)\n\n  function got_user(err, user) {\n    if(err || !user) {\n      return respond.unauthorized()\n    }\n\n    unpm.User.update(user, body, updated)\n  }\n\n  function updated(err, user) {\n    if(err || !user) {\n      return respond(err)\n    }\n\n    respond(null, 201, user)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/controllers/register.js":"module.exports = register\n\nfunction register(respond, route, body, unpm) {\n  var username = route.splats[0]\n\n  unpm.User.find(username, function(err, user) {\n    if(user) {\n      return respond.conflict()\n    }\n\n    unpm.User.create(username, body, created, respond)\n  })\n\n  function created(err) {\n    if(err) {\n      return respond(err)\n    }\n\n    respond(null, 201, body)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/controllers/user.js":"module.exports = getUser\n\nfunction getUser(respond, route, unpm) {\n  var username = route.splats[0]\n\n  unpm.User.find(username, function(err, user) {\n    if(err) {\n      return respond(err)\n    }\n\n    if(!username) {\n      return respond.notFound()\n    }\n\n    respond(null, 200, user)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/check-auth.js":"module.exports = check\n\nvar authRoutes = [\n  '/_session',\n  '/-/user/org.couchdb.user:*',\n  '/-/user/org.couchdb.user:*/*/*'\n]\n\nfunction check(respond, route, unpm, done, _auth) {\n  var config = unpm.config.auth\n  var whitelist = config.whitelist || authRoutes\n  var gets = config.authenticatedGets || config.authenticated_gets\n\n  if(!gets && respond.req.method.toUpperCase() === 'GET') {\n    return done()\n  }\n\n  if(route && whitelist.indexOf(route.route) !== -1) {\n    return done()\n  }\n\n  (_auth || auth)(respond, route, unpm, done)\n}\n\nfunction auth(respond, route, unpm, done) {\n  var authHeader = respond.req.headers.authorization\n  var username\n  var password\n\n  if(!authHeader) {\n    return unauthorized()\n  }\n\n  authHeader = new Buffer(\n    respond.req.headers.authorization.split(' ')[1],\n    'base64'\n  ).toString().split(':')\n\n  username = authHeader[0]\n  password = authHeader[1]\n\n  unpm.User.auth(username, password, gotUser)\n\n  function gotUser(err, user) {\n    if(err || !user) {\n      return unauthorized()\n    }\n\n    done()\n  }\n\n  function unauthorized() {\n    unpm.log.info({username: username, message: 'authorization failed'})\n    respond.res.writeHead(403)\n    respond.res.end('{\"error\":\"forbidden\"}')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-auth/lib/user.js":"var hash = require('password-hash')\nvar crypto = require('crypto')\n\nmodule.exports = setup\n\nfunction setup(unpm) {\n  var exports = {}\n\n  exports.find = findUser\n  exports.create = create\n  exports.update = update\n  exports.auth = auth\n\n  return exports\n\n  function findUser(username, done) {\n    find(username, function(err, user) {\n      if(err || !user) {\n        return done(err)\n      }\n\n      done(null, cleanUser(user))\n    })\n  }\n\n  function find(username, done) {\n    unpm.backend.getUser(username, function(err, data) {\n      done(err, data || null)\n    })\n  }\n\n  function auth(username, password, done) {\n    find(username, function(err, user) {\n      var invalid = new Error('Name or password is incorrect.')\n\n      if(err || !user) {\n        return done(invalid)\n      }\n\n      password = user.salt ? sha(password + user.salt) : password\n\n\n      if(!hash.verify(password, user.password_hash)) {\n        return done(invalid)\n      }\n\n      done(null, cleanUser(user))\n    })\n  }\n\n  function create(username, data, done) {\n    if(!username || !data) {\n      return done(new Error('username and data are required'))\n    }\n\n    try {\n      unpm.backend.setUser(\n        username,\n        build_user(username, data, 1),\n        done\n      )\n    } catch(err) {\n      done(err)\n    }\n  }\n\n  function update(old, updated, done) {\n    try {\n      unpm.backend.setUser(\n        old.name,\n        build_user(updated.name, updated),\n        on_updated\n      )\n    } catch(err) {\n      done(err)\n    }\n\n    function on_updated(err) {\n      if(err) {\n        return done(err)\n      }\n\n      done(null, cleanUser(updated))\n    }\n  }\n\n  function build_user(username, data) {\n    var user = {}\n\n    user.name = username\n    user.email = data.email\n    user.salt = data.salt\n    user.date = data.date\n    user.password_hash = hash_pass(data.password_sha || data.password)\n\n    return user\n  }\n\n  function cleanUser(raw_user) {\n    var user = {}\n\n    user.name = raw_user.name\n    user.email = raw_user.email\n    user.date = raw_user.date\n\n    return user\n  }\n\n  function md5(s) {\n    return crypto.createHash('md5').update(s).digest('hex')\n  }\n\n  function sha(s) {\n    return crypto.createHash('sha1').update(s).digest('hex')\n  }\n\n  function hash_pass(s, settings) {\n    settings = settings || unpm.config.crypto\n\n    return hash.generate(s, settings)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/controllers/index.js":"module.exports.getPackage = require('./getPackage')\nmodule.exports.getTarball = require('./getTarball')\nmodule.exports.unpublish = require('./unpublish')\nmodule.exports.publish = require('./publish')\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/controllers/getPackage.js":"var request = require('request')\nvar url = require('url')\nvar qs = require('querystring')\n\nmodule.exports = getPackage\n\nfunction getPackage(respond, route, unpm) {\n  var baseUrl = url.format(unpm.config.host)\n  var version = route.params.version\n  var name = route.params.name\n\n  if(!version) {\n    return unpm.Package.getMeta(name, returnMeta)\n  }\n\n  unpm.Package.getVersionMeta(name, version, returnMeta)\n\n  function returnMeta(err, meta) {\n    if(err) {\n      return respond(err)\n    }\n\n    if(!meta) {\n      return notFound()\n    }\n\n    if(!version) {\n      Object.keys(meta.versions).forEach(function(version) {\n        meta.versions[version].dist = meta.versions[version].dist || {}\n        meta.versions[version].dist.tarball = getTarballUrl(version)\n\n        if(!meta.versions[version]._id) {\n          meta.versions[version]._id = name + '@' + version\n        }\n      })\n    } else {\n      meta.dist.tarball = getTarballUrl(version)\n    }\n\n    if(unpm.config.fallback && unpm.config.alwaysIncludeFallback) {\n      return addFallback(meta, respond)\n    }\n\n    return respond(null, 200, meta)\n  }\n\n  function getTarballUrl(version) {\n    var escapedName = name.replace('/', '%2f')\n    return baseUrl + '/' + escapedName + '/-/' + escapedName + '/' + version + '.tgz'\n  }\n\n  function notFound() {\n    var fallback = unpm.config.fallback\n\n    if(!fallback) {\n      return respond.notFound()\n    }\n\n    if(fallback[fallback.length - 1] === '/') fallback = fallback.slice(0, -1)\n\n    request({\n      uri: fallback + route.path,\n      gzip: true\n    }, proxyResponse)\n  }\n\n  function proxyResponse(err, res, data) {\n    if(err) {\n      return respond(err)\n    }\n\n    if(res.statusCode !== 200) {\n      respond.res.writeHead(res.statusCode, res.headers)\n\n      return respond.res.end(data)\n    }\n\n    try {\n      respond(null, 200, JSON.parse(data))\n    } catch(err) {\n      respond(err)\n    }\n  }\n\n  function addFallback(meta) {\n    request({\n      uri: unpm.config.fallback + route.path,\n      gzip: true\n    }, function onResponse(err, res, data) {\n      var versions\n      if(err || res.statusCode !== 200) {\n        return respond(null, 200, meta)\n      }\n\n      try {\n        versions = JSON.parse(data).versions\n      } catch(err) {\n        return respond(null, 200, meta)\n      }\n\n      var keys = Object.keys(meta.versions)\n\n      for(var i = 0, l = keys.length; i < l; ++i) {\n        versions[keys[i]] = meta.versions[keys[i]]\n      }\n\n      meta.versions = versions\n      respond(null, 200, meta)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/bin/server.js":"#!/usr/bin/env node\n\nvar loadConfig = require('../lib/config')\nvar backend = require('unpm-fs-backend')\nvar path = require('path')\nvar nopt = require('nopt')\nvar unpm = require('../')\n\nvar noptions = {\n  'port': Number,\n  'quiet': Boolean,\n  'log': String,\n  'logdir': String,\n  'datadir': String,\n  'fallback': String,\n  'configfile': String\n}\n\nvar shorts = {\n  'p': ['--port'],\n  'q': ['--quiet'],\n  'l': ['--log'],\n  'L': ['--logdir'],\n  'd': ['--datadir'],\n  'F': ['--fallback'],\n  'c': ['--configfile']\n}\n\nvar config = nopt(noptions, shorts)\n\nif(config.logdir) {\n  config.logDir = config.logdir\n}\n\nif(config.quiet) {\n  config.verbose = false\n}\n\nvar CWD = process.cwd()\n\nvar unpmService\nvar tarballsDir\nvar storeDir\nvar userDir\nvar metaDir\nvar dataDir\n\nconfig = loadConfig(config || {})\n\ndataDir = config.datadir ?\n  path.normalize(config.datadir) :\n  path.join(CWD, 'data')\n\nif(!config.backend) {\n  tarballsDir = path.join(dataDir, 'tarballs')\n  userDir = path.join(dataDir, 'users')\n  metaDir = path.join(dataDir, 'meta')\n  storeDir = path.join(dataDir, 'store')\n\n  config.backend = backend(metaDir, userDir, tarballsDir, storeDir)\n}\n\nunpmService = unpm(config)\nunpmService.server.listen(unpmService.config.host.port)\n\nunpmService.log.info('Started unpm on port %s', unpmService.config.host.port)\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/config.js":"var path = require('path')\nvar fs = require('fs')\n\nmodule.exports = function(config) {\n  if(config.configfile) {\n    add(JSON.parse(fs.readFileSync(path.join(config.configfile))))\n  }\n\n  add(JSON.parse(fs.readFileSync(path.join(__dirname, 'config.json'))))\n\n  return config\n\n  function add(overrides) {\n    Object.keys(overrides).forEach(function(key) {\n      config[key] = config[key] === undefined ? overrides[key] : config[key]\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm-fs-backend/index.js":"var EE = require('events').EventEmitter\n  , qs = require('querystring')\n  , path = require('path')\n  , fs = require('fs')\n\nvar jrs = require('json-readdir-stream')\n  , through = require('through')\n  , mkdirp = require('mkdirp')\n\nvar normal = path.normalize\n  , join = path.join\n\nvar CWD = process.cwd()\n\nmodule.exports = fs_back\n\nfunction fs_back(_meta_dir, _user_dir, _tarballs_dir, _store_dir) {\n  var backend = new EE\n    , tarballs_dir\n    , store_dir\n    , user_dir\n    , meta_dir\n\n  tarballs_dir = _tarballs_dir ? normal(_tarballs_dir) : join(CWD, 'tarballs')\n  store_dir = _store_dir ? normal(_store_dir) : join(CWD, 'store')\n  user_dir = _user_dir ? normal(_user_dir) : join(CWD, 'users')\n  meta_dir = _meta_dir ? normal(_meta_dir) : join(CWD, 'meta')\n\n  mkdirp.sync(tarballs_dir)\n  mkdirp.sync(store_dir)\n  mkdirp.sync(user_dir)\n  mkdirp.sync(meta_dir)\n\n  backend.getUser = get(user_dir)\n  backend.setUser = set(user_dir, 'setUser')\n  backend.removeUser = remove(user_dir, 'removeUser')\n  backend.createUserStream = stream_all(user_dir)\n  backend.getMeta = get(meta_dir)\n  backend.setMeta = set(meta_dir, 'setMeta')\n  backend.removeMeta = remove(meta_dir, 'removeMeta')\n  backend.createMetaStream = stream_all(meta_dir)\n  backend.get = get(store_dir)\n  backend.set = set(store_dir, 'set')\n  backend.remove = remove(store_dir, 'remove')\n  backend.createStream = stream_all(store_dir)\n  backend.getTarball = get_tarball\n  backend.setTarball = set_tarball\n  backend.removeTarball = remove_tarball\n\n  return backend\n\n  function get(dir) {\n    return function get_data(_key, _done) {\n      var key = qs.escape(_key)\n        , done = _done || noop\n\n      read_json(join(dir, key), done)\n    }\n  }\n\n  function stream_all(dir) {\n    return function stream_data(options) {\n      return jrs(dir, options).pipe(unescape_stream(options))\n    }\n  }\n\n  function set(dir, event_name) {\n    return function set_data(_key, data, _done) {\n      var key = qs.escape(_key)\n        , done = _done || noop\n        , old_data\n\n      get(dir)(key, got_old)\n\n      function got_old(err, old) {\n        if(err) return done(err)\n\n        old_data = old\n\n        write_json(join(dir, key), data, saved_new)\n      }\n\n      function saved_new(err, data) {\n        if(err) return done(err)\n\n        done(null, data, old_data)\n        backend.emit(event_name, key, data, old_data)\n      }\n    }\n  }\n\n  function remove(dir, event_name) {\n    return function remove_data(_key, _done) {\n      var key = qs.escape(_key)\n        , done = _done || noop\n        , old_data\n\n      get(dir)(key, got_old)\n\n      function got_old(err, data) {\n        if(err) return done(err)\n\n        old_data = data\n\n        fs.unlink(join(dir, key + '.json'), removed)\n      }\n\n      function removed(err) {\n        if(err) return done(err)\n\n        done(null, old_data)\n        backend.emit(event_name, key, old_data)\n      }\n    }\n  }\n\n  function get_tarball(name, version) {\n    return fs.createReadStream(\n        join(tarballs_dir, qs.escape(name) + '@' + version + '.tgz')\n    )\n  }\n\n  function set_tarball(name, version) {\n    return fs.createWriteStream(\n        join(tarballs_dir, qs.escape(name) + '@' + version + '.tgz')\n    )\n  }\n\n  function remove_tarball(name, version, callback) {\n    fs.unlink(join(tarballs_dir, qs.escape(name) + '@' + version + '.tgz'), callback)\n  }\n}\n\nfunction write_json(filename, data, ready) {\n  try {\n    var json_data = JSON.stringify(data, null, 2)\n  } catch(e) {\n    return ready(e)\n  }\n\n  fs.writeFile(filename + '.json', json_data, write_done)\n\n  function write_done(err) {\n    if(err) return ready(err)\n\n    ready(null, data)\n  }\n}\n\nfunction read_json(filename, ready) {\n  fs.readFile(filename + '.json', parse_json)\n\n  function parse_json(err, data) {\n    if(err) return err.code === 'ENOENT' ? ready(null, null) : ready(err)\n\n    try {\n      return ready(null, JSON.parse(data))\n    } catch(e) {\n      return ready(e)\n    }\n  }\n}\n\nfunction unescape_stream(options) {\n  if(options && !options.keys && typeof options.keys !== 'undefined') {\n    return through()\n  }\n\n  return through(function unescape(data) {\n    if(typeof data === 'object') {\n      data.key = qs.unescape(data.key)\n      return this.queue(data)\n    }\n\n    return this.queue(qs.unescape(data))\n  })\n}\nfunction noop() {}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/cidr.js":"var cidrCheck = require('range_check')\n\nmodule.exports = setup\n\nfunction setup(unpm) {\n  if(unpm.config.cidr) {\n    unpm.middleware.push(check)\n  }\n\n  function check(respond, route, unpm, done) {\n    var ip = respond.req.connection.remoteAddress\n    var allowed =  cidrCheck.in_range(ip, unpm.config.cidr)\n\n    if(allowed) {\n      return done()\n    }\n\n    unpm.log.info({ip: ip, message: 'IP out of CIDR range'})\n\n    respond.res.writeHead(403, {\n      'Content-Type': 'application/json'\n    })\n\n    respond.res.end(JSON.stringify({\n      error: 'forbidden',\n      reason: 'invalid ip'\n    }))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/handler.js":"var runMiddleware = require('./middleware')\nvar responder = require('./respond')\n\nmodule.exports = function(unpm) {\n  return function handler(req, res) {\n    var route = unpm.router.match(req) || null\n    var log = unpm.log\n\n    var respond = responder(req, res, unpm)\n\n    res.on('finish', function() {\n      if(req.headers.authorization) {\n        req.headers.authorization = 'Basic ~~removed~~'\n      }\n\n      var info = {\n        statusCode: res.statusCode,\n        method: req.method,\n        url: req.url\n      }\n\n      log.info(info)\n      log.debug({headers: req.headers})\n    })\n\n    if(!unpm.middleware || !unpm.middleware.length) {\n      return runRoute()\n    }\n\n    runMiddleware(unpm.middleware, respond, route, unpm, runRoute)\n\n    function runRoute(err) {\n      if(err) {\n        return respond(err)\n      }\n\n      if(!route) {\n        return respond.notFound()\n      }\n\n      route.fn(respond, route, unpm)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/middleware.js":"module.exports = runMiddleware\n\nfunction runMiddleware(middleware, respond, route, unpm, done) {\n  if(!middleware || !middleware.length) {\n    return done()\n  }\n\n  middleware[0](respond, route, unpm, function(err) {\n    if(err) {\n      return done(err)\n    }\n\n    runMiddleware(middleware.slice(1), respond, route, unpm, done)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/index.js":"var unauthorized = require('./401')\nvar conflict = require('./409')\nvar notFound = require('./404')\nvar onError = require('./500')\nvar json = require('./json')\n\nmodule.exports = responder\n\nfunction responder(req, res, unpm) {\n  respond.unauthorized = unauthorized\n  respond.notFound = notFound\n  respond.onError = onError\n  respond.conflict = conflict\n  respond.json = json\n  respond.req = req\n  respond.res = res\n\n  return respond\n\n  function respond(err, status, data) {\n    if(err) {\n      unpm.log.error(err)\n      return respond.onError(err)\n    }\n\n    respond.json(status, data)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/401.js":"module.exports = unauthorized\n\nfunction unauthorized() {\n  this.res.writeHead(401, {\n    'Content-Type': 'application/json'\n  })\n\n  this.res.end(JSON.stringify({\n    error: 'unauthorized',\n    reason: 'Name or password is incorrect.'\n  }))\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/409.js":"module.exports = conflict\n\nfunction conflict() {\n  this.res.writeHead(409, {\n    'Content-Type': 'application/json'\n  })\n\n  this.res.end(JSON.stringify({\n    error: 'conflict',\n    reason: 'Document update conflict.'\n  }))\n}\n\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/404.js":"module.exports = notFound\n\nfunction notFound() {\n  this.res.writeHead(404, {\n    'Content-Type': 'application/json'\n  })\n\n  this.res.end(JSON.stringify({\n    error: 'notFound',\n    reason: 'Document not found.'\n  }))\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/500.js":"module.exports = onError\n\nfunction onError() {\n  this.res.writeHead(500)\n  this.res.end('Something went wrong.')\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/respond/json.js":"module.exports = json\n\nfunction json(status, data) {\n  this.res.writeHead(status, {\n    'Content-Type': 'application/json'\n  })\n\n  try {\n    return this.res.end(JSON.stringify(data))\n  } catch(err) {\n    return this.onError(err)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/logging.js":"var bunyan = require('bunyan')\nvar path = require('path')\n\nvar noopLogger = {\n  info: noop,\n  error: noop,\n  debug: noop\n}\n\nmodule.exports = logger\n\nfunction logger(config) {\n  var bunyanOptions = {}\n  var logDir\n\n  if(!config.verbose && !config.logDir && !config.log) {\n    return noopLogger\n  }\n\n  bunyanOptions.name = 'unpm'\n  bunyanOptions.streams = []\n\n  if(config.verbose) {\n    bunyanOptions.streams.push({\n      level: config.log || 'info',\n      stream: process.stdout\n    })\n  }\n\n  if(config.logDir || (config.log && !config.verbose)) {\n    logDir = config.logDir || process.cwd()\n\n    bunyanOptions.streams.push({\n      level: config.log || 'info',\n      type: 'rotating-file',\n      period: '1d',\n      count: 10,\n      path: path.join(logDir, 'unpm.log')\n    })\n  }\n\n  return bunyan.createLogger(bunyanOptions)\n}\n\nfunction noop() {\n  // no-op\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/controllers/getTarball.js":"module.exports = getTarball\n\nfunction getTarball(respond, route, unpm) {\n  var version = route.params.version\n  var name = route.params.name\n  var started = false\n\n  var tarballStream = unpm.Package.getTarball(name, version)\n\n  tarballStream.on('error', function(err) {\n    if(started) {\n      return unpm.log.error(err)\n    }\n\n    if(err.code === 'ENOTFOUND' || err.code === 'ENOENT' || err.notFound) {\n      return notFound()\n    }\n\n    respond.onError()\n  })\n\n  tarballStream.once('data', function(data) {\n    started = true\n    tarballStream.pipe(respond.res).write(data)\n  })\n\n  function notFound() {\n    return respond.notFound()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/controllers/publish.js":"var guard = require('../utils/guard')\nvar load = require('../utils/load')\n\nmodule.exports = publish\n\nfunction publish(respond, route, unpm) {\n  var data = []\n  var version\n\n  load(respond.req, guard(getVersions, respond))\n\n  function getVersions(meta) {\n    var latest = meta['dist-tags'].latest\n\n    unpm.Package.getVersions(meta.name, function(err, versions) {\n      if(versions && versions.indexOf(latest) !== -1) {\n        return respond.conflict()\n      }\n\n      unpm.Package.publish(meta, created)\n    })\n  }\n\n  function created(err, data) {\n    respond(err, 201, data)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/utils/guard.js":"module.exports = guard\n\nfunction guard(fn, onError) {\n  return function(err) {\n    if(err) {\n      return onError(err)\n    }\n\n    try {\n      return fn.apply(this, [].slice.call(arguments, 1))\n    } catch(err) {\n      return onError(err)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/utils/load.js":"var concat = require('concat-stream')\n\nmodule.exports = load\n\nfunction load(req, done) {\n  var stream = concat(function(data) {\n    try {\n      data = JSON.parse(data.toString())\n      done(null, data)\n    } catch(err) {\n      done(err)\n    }\n  })\n\n  req.pipe(stream)\n  stream.on('error', done)\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/controllers/unpublish.js":"var load = require('../utils/load')\n\nmodule.exports.all = removeAll\nmodule.exports.some = removeSome\nmodule.exports.tarball = removeTarball\n\nfunction removeAll(respond, route, unpm) {\n  var name = route.params.name\n\n  unpm.Package.remove(name, function(err, data) {\n    if(err) {\n      return respond(err)\n    }\n\n    respond(null, 200, data)\n  })\n}\n\nfunction removeSome(respond, route, unpm) {\n  var name = route.params.name\n\n  load(respond.req, function(err, data) {\n    if(err) {\n      return respond(err)\n    }\n\n    unpm.Package.getVersions(name, compare)\n\n    function compare(err, versions) {\n      if(err) {\n        return respond(err)\n      }\n\n      remove(versions.map(missing).filter(Boolean))\n    }\n\n    function missing(version) {\n      return !data.versions[version] && version\n    }\n  })\n\n  function remove(versions) {\n    if(!versions.length) {\n      return respond.notFound()\n    }\n\n    var remaining = versions.length\n    var returned = false\n\n    versions.forEach(function(version) {\n      unpm.Package.removeVersion(name, version, done)\n    })\n\n    function done(err, data) {\n      if(returned) {\n        return\n      }\n\n      if(err) {\n        returned = true\n\n        return respond(err)\n      }\n\n      if(!--remaining) {\n        returned = true\n        respond(null, 200, {ok: 'updated package'})\n      }\n    }\n  }\n}\n\nfunction removeTarball(respond, route, unpm) {\n  respond(null, 200, {ok: 'file removed'})\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/models/Package.js":"var guard = require('../utils/guard')\nvar latest_version = require('../utils/latest-version')\nvar semver = require('semver')\n\nvar methods = [\n  'getMeta',\n  'setMeta',\n  'removeMeta',\n  'getTarball',\n  'setTarball',\n  'removeTarball'\n]\n\nmodule.exports = Package\n\nfunction Package(unpm) {\n  if(!(this instanceof Package)) {\n    return new Package(unpm)\n  }\n\n  var self = this\n  methods.forEach(function(method) {\n    self[method] = unpm.backend[method] && unpm.backend[method].bind(unpm.backend)\n  })\n}\n\nPackage.prototype.getVersionMeta = getVersionMeta\nPackage.prototype.removeVersion = removeVersion\nPackage.prototype.getVersions = getVersions\nPackage.prototype._setMeta = _setMeta\nPackage.prototype.saveMeta = saveMeta\nPackage.prototype.publish = publish\nPackage.prototype.remove = remove\n\nvar metaKeys = [\n    'author'\n  , 'bugs'\n  , 'description'\n  , 'homepage'\n  , 'keywords'\n  , 'license'\n  , 'maintainers'\n  , 'readme'\n  , 'readmeFilename'\n  , 'repository'\n]\n\nfunction _setMeta(name, meta, done) {\n  meta._rev = ~~meta._rev + 1\n  this.setMeta(name, meta, done)\n}\n\nfunction remove(name, done) {\n  var self = this\n\n  self.getVersions(name, function(err, versions) {\n    if(err || !versions.length) {\n      return done(err)\n    }\n\n    var remaining = versions.length\n      , returned\n\n    versions.forEach(function(version) {\n      self.removeTarball(name, version, removed)\n    })\n\n    function removed(err) {\n      if(returned) {\n        return\n      }\n\n      if(err) {\n        returned = true\n\n        return done(err)\n      }\n\n      if(!--remaining) {\n        returned = true\n        self.removeMeta(name, done)\n      }\n    }\n  })\n}\n\nfunction removeVersion(name, version, done) {\n  var self = this\n\n  self.getMeta(name, function(err, meta) {\n    if(err) {\n      return done(err)\n    }\n\n    version = versionFromMeta(meta, version)\n\n    var versionMeta = meta.versions[version]\n\n    if(!version || !versionMeta) {\n      return done()\n    }\n\n    delete meta.versions[version]\n\n    meta['dist-tags'].latest = latest_version(Object.keys(meta.versions))\n\n    if(Object.keys(meta.versions).length) {\n      self._setMeta(name, meta, removeTarball)\n    } else {\n      self.removeMeta(name, meta, removeTarball)\n    }\n  })\n\n  function removeTarball(err, data) {\n    if(err) {\n      return done(err)\n    }\n\n    self.removeTarball(name, version, function(err) {\n      done(err, data)\n    })\n  }\n}\n\nfunction getVersions(name, done) {\n  this.getMeta(name, guard(function(meta) {\n    if(!meta) {\n      return done()\n    }\n\n    done(null, Object.keys(meta.versions))\n  }, done))\n}\n\nfunction versionFromMeta(meta, version) {\n  return meta['dist-tags'][version || 'latest'] || semver.maxSatisfying(\n      Object.keys(meta.versions)\n    , version || '*'\n  )\n}\n\nfunction getVersionMeta(name, version, done) {\n  this.getMeta(name, guard(function(meta) {\n    if(!meta) {\n      return done()\n    }\n\n    version = versionFromMeta(meta, version)\n\n    if(!version) {\n      done()\n    }\n\n    var versionMeta = meta.versions[version]\n\n    if(!versionMeta._id) {\n      versionMeta._id = name + '@' + version\n    }\n\n    done(null, versionMeta)\n  }, done))\n}\n\nfunction publish(meta, done) {\n  var tags = meta['dist-tags']\n  var name = meta.name\n  var fixedVersion\n  var filename\n  var version\n  var stream\n\n  try {\n    version = tags.latest\n    filename = name + '-' + version + '.tgz'\n    fixedVersion = version.replace(\n        /^[\\d\\.]*/\n      , version.match(/^[\\d\\.]*/)[0].split('.').map(function(val) {\n          return +val\n        }).join('.')\n    )\n    meta.versions[fixedVersion] = meta.versions[version]\n    stream = this.setTarball(name, fixedVersion)\n    stream.write(new Buffer(meta._attachments[filename].data, 'base64'))\n    stream.end()\n  } catch(err) {\n    done(err)\n  }\n\n  delete meta._attachments\n  this.saveMeta(name, fixedVersion, tags, meta, done)\n}\n\nfunction saveMeta(name, version, tags, meta, done) {\n  var self = this\n\n  this.getMeta(name, function(err, module_meta) {\n    module_meta = module_meta || {'dist-tags': {}, versions: {}, name: name}\n\n    var versions = Object.keys(module_meta.versions)\n\n    module_meta.versions[version] = meta.versions[version]\n    versions.push(version)\n\n    module_meta['dist-tags'].latest = latest_version(versions)\n\n    Object.keys(tags).forEach(function(tag) {\n      if(!module_meta['dist-tags'][tag]) {\n        module_meta['dist-tags'][tag] = tags[tag]\n      }\n    })\n\n    if(versions[0] === version) {\n      for(var i = 0, l = metaKeys.length; i < l; ++i) {\n        module_meta[metaKeys[i]] = meta[metaKeys[i]]\n      }\n    }\n\n    delete meta.readme\n\n    self._setMeta(name, module_meta, function(err) {\n      done(err, err ? null : module_meta)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-unpm/node_modules/unpm/lib/utils/latest-version.js":"var semver = require('semver')\n\nmodule.exports = latest_version\n\nfunction latest_version(versions) {\n  return versions.sort(by_semver)[0]\n}\n\nfunction by_semver(v1, v2) {\n  if(semver.lt(v1, v2)) {\n    return 1\n  }\n\n  return -1\n}\n"}